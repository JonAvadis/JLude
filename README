README
******

This is a very powerful javascript 'library'. It offers
various and mighty functions which allow you to formulate powerful
and short expressions. These functions are commonly used in
functional languages.

All functions support currying. This is done by checking arguments
for undefined, as if a function parameter is not specified in a
call it is undefined.

If you find any bugs please let me know (fmnssun -at- gmail {dot} com).
If you find this 'library' useful or have feature wishes: Let me know.

IMPORTANT
*********

Javascript has no strict type system nor are Javascript lists homogenous.
This has advantages and disadvantages. List functions like init
accept every type which supports x[i]. Keep in mind, that strings in Javascripts
are not lists (or arrays). init("bar") is not "ba" but ["b","a"] instead.
If you want "ba" you have to use concatStr(init("bar")).

ABOUT THE AUTHOR
****************

My name is Roman Muentener and I'm a student at the 
Zurich Hochschule for applied sciences in Winterthur.

HELP
****

You can help me by giving me feedback, finding and eliminating bugs, spreading the word
about JLude or of course, you can already help me by just using JLude.


EXAMPLES
********

You invest a thousand bucks with 3% in interest and want to
know how much you get after 10 years.
  iterate(10,function(n){return n*(1+3/100);})(1000)
 => 1343.91

Run Length Encoding
  var rle = $c(map(pairWith(head,length)),$c(group,sort));
  rle("Insert your string here");

Find the first number 2^n greater than 100.
  until(flip(gt,100),mul(2),1)
 => 128

Add 1 to each element in a list.
  map(add(1),[1,2,3])
 => [2,3,4]

Apply several functions to the same value.
  map($a(5),[add(3),mul(3),sub(3),div(3)])
 => 8,15,-2,0.6

Compose functions.
  $cm([foldl1(sub),reverse])([1,2,3,4])
 => -2
